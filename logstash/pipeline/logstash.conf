input {
  tcp {
    port => 5000
    codec => json_lines
  }
  
  udp {
    port => 5000
    codec => json_lines
  }
  
  # For Docker container logs
  beats {
    port => 5044
  }
}

filter {
  # Parse timestamp if present - Winston already provides ISO8601 format
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }
  
  # Add hostname from the log or use the host field
  if [hostname] {
    mutate {
      add_field => { "source_hostname" => "%{hostname}" }
    }
  } else {
    mutate {
      add_field => { "source_hostname" => "%{host}" }
    }
  }
  
  # Ensure log level is uppercase and consistent
  if [level] {
    mutate {
      uppercase => [ "level" ]
    }
  }
  
  # Add document ID based on timestamp and service for uniqueness
  if [timestamp] and [service] {
    mutate {
      add_field => { "document_id" => "%{service}-%{+YYYY.MM.dd.HH.mm.ss}" }
    }
  }
  
  # Parse memory usage fields for better querying
  if [memory] {
    mutate {
      add_field => { 
        "memory_rss_mb" => "%{[memory][rss]}"
        "memory_heap_used_mb" => "%{[memory][heapUsed]}"
        "memory_heap_total_mb" => "%{[memory][heapTotal]}"
      }
    }
    
    # Convert bytes to MB
    ruby {
      code => "
        if event.get('memory_rss_mb')
          event.set('memory_rss_mb', (event.get('memory_rss_mb').to_f / 1024 / 1024).round(2))
        end
        if event.get('memory_heap_used_mb')
          event.set('memory_heap_used_mb', (event.get('memory_heap_used_mb').to_f / 1024 / 1024).round(2))
        end
        if event.get('memory_heap_total_mb')
          event.set('memory_heap_total_mb', (event.get('memory_heap_total_mb').to_f / 1024 / 1024).round(2))
        end
      "
    }
  }
  
  # Add tags based on log type for easier filtering
  if [logType] {
    mutate {
      add_tag => [ "logtype_%{logType}" ]
    }
  }
  
  # Add severity tag based on level
  if [level] == "ERROR" {
    mutate {
      add_tag => [ "severity_high" ]
    }
  } else if [level] == "WARN" {
    mutate {
      add_tag => [ "severity_medium" ]
    }
  } else {
    mutate {
      add_tag => [ "severity_low" ]
    }
  }
  
  # Clean up unnecessary fields
  mutate {
    remove_field => [ "host" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "logs-%{+YYYY.MM.dd}"
    # Each log becomes a separate document in Elasticsearch
    # The document_id ensures uniqueness
  }
  
  # Debug output to stdout (remove in production)
  stdout {
    codec => rubydebug
  }
}